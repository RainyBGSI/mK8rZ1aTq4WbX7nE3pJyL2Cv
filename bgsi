local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
print(game:HttpGet('https://sirius.menu/rayfield'))

local Window = Rayfield:CreateWindow({
    Name = "Bubble Gum Simulator INFINITY",
    Icon = 0,
    LoadingTitle = "Loading Interface...",
    LoadingSubtitle = "",
    Theme = "Default",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "BGSI Config"
    },

    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },

    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

local Tab = Window:CreateTab("Main", 4483362458)

local Section = Tab:CreateSection("Auto")
local Toggle = Tab:CreateToggle({
   Name = "Auto Blow Bubbles",
   CurrentValue = false,
   Flag = "AutoBlowToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})


local Toggle = Tab:CreateToggle({
   Name = "Auto Sell (Must be near sell area)",
   CurrentValue = false,
   Flag = "AutoSellToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Claim Playtime",
   CurrentValue = false,
   Flag = "AutoPlaytimeToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Open Chests",
   CurrentValue = false,
   Flag = "AutoChestsToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Collect Aura",
   CurrentValue = false,
   Flag = "AutoCollectToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Claim Season Rewards",
   CurrentValue = false,
   Flag = "AutoSeasonToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Claim Wheel Ticket",
   CurrentValue = false,
   Flag = "AutoWheelToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Buy Mastery",
   CurrentValue = false,
   Flag = "AutoMasteryToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Section = Tab:CreateSection("Others")
local Toggle = Tab:CreateToggle({
   Name = "Anti AFK",
   CurrentValue = false,
   Flag = "AntiAFKToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Button = Tab:CreateButton({
   Name = "Unlock All Islands",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local Tab = Window:CreateTab("Enchant", 4483362458) -- Title, Image

local Section = Tab:CreateSection("This only works in the Enchanting Area")
local Dropdown = Tab:CreateDropdown({
   Name = "Select Enchant:",
   Options = {"None","üí∞ Looter", "ü´ß Bubbler", "‚ö°Ô∏è Team Up", "‚ú® Gleaming", "üß≤ Magnetism", "‚àû Infinity", "üé≤ High Roller"},
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Select Enchant Level:",
   Options = {"None","I", "II", "III", "IV", "V"},
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Enchant",
   CurrentValue = false,
   Flag = "AutoEnchantToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Tab = Window:CreateTab("Easter", 4483362458) -- Title, Image



local Tab = Window:CreateTab("Visual", 4483362458) -- Title, Image

local Toggle = Tab:CreateToggle({
   Name = "Rift ESP",
   CurrentValue = false,
   Flag = "RiftESPToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Rift Luck ESP",
   CurrentValue = false,
   Flag = "RiftLuckToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Rift distance ESP",
   CurrentValue = false,
   Flag = "RiftDistanceToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Rift Timer ESP",
   CurrentValue = false,
   Flag = "RiftTimerToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Tab = Window:CreateTab("Rifts", 4483362458) -- Title, Image

local Dropdown = Tab:CreateDropdown({
   Name = "Select which rift to auto farm",
   Options = {"None", "Aura Egg","Royal Chest", "Rainbow Egg","Void Egg", "Nightmare Egg", "Bunny Egg", "Pastel Egg"},
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "RiftAFDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Select the luck of rift to autofarm",
   Options = {"None","5x", "x10", "x25"},
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "LuckAFDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})
