local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local MainWindow = Rayfield:CreateWindow({
    Name = "Bubble Gum Simulator Infinity",
    Icon = 0,
    LoadingTitle = "Loading Interface...",
    LoadingSubtitle = "",
    Theme = "Default",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "BGSI Script"
    },

    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },

    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

local MainTab = MainWindow:CreateTab("Main", 4483362458)

-- Auto Blow Bubbles
local autoBlowRunning = false
local blowThread = nil

MainTab:CreateToggle({
    Name = "Auto Blow Bubbles",
    CurrentValue = false,
    Flag = "AutoBlowBubble",
    Callback = function(Value)
        autoBlowRunning = Value

        if autoBlowRunning then
            if blowThread == nil then
                blowThread = task.spawn(function()
                    while true do
                        if not autoBlowRunning then break end

                        local args = { [1] = "BlowBubble" }

                        game:GetService("ReplicatedStorage")
                            :WaitForChild("Shared")
                            :WaitForChild("Framework")
                            :WaitForChild("Network")
                            :WaitForChild("Remote")
                            :WaitForChild("Event")
                            :FireServer(unpack(args))

                        task.wait()
                    end
                    blowThread = nil
                end)
            end
        else
            autoBlowRunning = false
        end
    end,
})

-- Auto Sell
local autoSellRunning = false
local sellThread = nil

MainTab:CreateToggle({
    Name = "Auto Sell (Must be near selling area)",
    CurrentValue = false,
    Flag = "AutoSell",
    Callback = function(Value)
        autoSellRunning = Value
        if autoSellRunning then
            if sellThread == nil then
                sellThread = task.spawn(function()
                    while autoSellRunning do
                        game:GetService("ReplicatedStorage")
                            :WaitForChild("Shared")
                            :WaitForChild("Framework")
                            :WaitForChild("Network")
                            :WaitForChild("Remote")
                            :WaitForChild("Event")
                            :FireServer("SellBubble")
                        print("Selling bubble at:", os.clock())
                        task.wait(1)
                    end
                    sellThread = nil
                end)
            end
        else
            autoSellRunning = false
        end
    end,
})

-- Auto Claim Playtime
local autoClaimRunning = false
local claimThread = nil

MainTab:CreateToggle({
    Name = "Auto Claim Playtime",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        autoClaimRunning = Value
        if autoClaimRunning then
            if claimThread == nil then
                claimThread = task.spawn(function()
                    while autoClaimRunning do
                        game:GetService("ReplicatedStorage")
                            :WaitForChild("Shared")
                            :WaitForChild("Framework")
                            :WaitForChild("Network")
                            :WaitForChild("Remote")
                            :WaitForChild("Function")
                            :InvokeServer("ClaimPlaytime", 1, 2, 3, 4, 5, 6, 7, 8, 9)
                        print("Claiming playtime at:", os.clock())
                        task.wait(5)
                    end
                    claimThread = nil
                end)
            end
        else
            autoClaimRunning = false
        end
    end,
})
