local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Bubble Gum Simulator INFINITY",
    Icon = 0,
    LoadingTitle = "Loading Interface...",
    LoadingSubtitle = "",
    Theme = "Default",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "BGSI Config"
    },

    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },

    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

local Tab = Window:CreateTab("Main", nil) -- Title, Image

local Section = Tab:CreateSection("Main")
local Toggle = Tab:CreateToggle({
   Name = "Auto Blow Bubbles",
   CurrentValue = false,
   Flag = "AutoBlowToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
     _G.Bubble = Value
     if Value then
        task.spawn(function()
          while _G.Bubble do
            local args = {
              [1] = "BlowBubble"
             }

 game:GetService("ReplicatedStorage").Shared.Framework.Network.Remote.Event:FireServer(unpack(args))
          task.wait(0.1)
         end
       end)
     end
   end
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Sell (Must be near sell area)",
   CurrentValue = false,
   Flag = "AutoSellToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
     _G.Sell = Value
      if Value then
       task.spawn(function()
        while _G.Sell do
         local args = {
           [1] = "SellBubble"
          }

game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event"):FireServer(unpack(args))
         task.wait(0.1)
        end
      end)
    end
  end
})

local Section = Tab:CreateSection("Auto Claim")

local Toggle = Tab:CreateToggle({
   Name = "Auto Claim Playtime",
   CurrentValue = false,
   Flag = "AutoPlaytimeToggle",
   Callback = function(Value)
      _G.Playtime = Value
      if Value then
         task.spawn(function()
            while _G.Playtime do
               for i = 1, 9 do
                  local args = {
                     [1] = "ClaimPlaytime",
                     [2] = i
                  }

                  game:GetService("ReplicatedStorage")
                     :WaitForChild("Shared")
                     :WaitForChild("Framework")
                     :WaitForChild("Network")
                     :WaitForChild("Remote")
                     :WaitForChild("Function")
                     :InvokeServer(unpack(args))

                  task.wait(0.1)
               end
            end
         end)
      end
   end
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Claim Season Rewards",
   CurrentValue = false,
   Flag = "AutoSeasonToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Claim Wheel Ticket",
   CurrentValue = false,
   Flag = "AutoWheelToggle",
   Callback = function(Value)
      _G.Wheel = Value
      if Value then
         task.spawn(function()
            while _G.Wheel do
               local args = {
                  [1] = "ClaimFreeWheelSpin"
               }

               game:GetService("ReplicatedStorage")
                   :WaitForChild("Shared")
                   :WaitForChild("Framework")
                   :WaitForChild("Network")
                   :WaitForChild("Remote")
                   :WaitForChild("Event")
                   :FireServer(unpack(args))

               task.wait(0.1)
            end
         end)
      end
   end
})

local Section = Tab:CreateSection("Others")
local Toggle = Tab:CreateToggle({
   Name = "Auto Collect All Chests",
   CurrentValue = false,
   Flag = "AutoChestsToggle",
   Callback = function(Value)
      _G.Chest = Value
      local Chests = { "Giant Chest", "Void Chest" }

      if Value then
         task.spawn(function()
            while _G.Chest do
               for _, chestName in ipairs(Chests) do
                  local args = {
                     [1] = "ClaimChest",
                     [2] = chestName
                  }

                  game:GetService("ReplicatedStorage")
                      :WaitForChild("Shared")
                      :WaitForChild("Framework")
                      :WaitForChild("Network")
                      :WaitForChild("Remote")
                      :WaitForChild("Event")
                      :FireServer(unpack(args))

                  task.wait(0.1)
               end
            end
         end)
      end
   end
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Collect Aura",
   CurrentValue = false,
   Flag = "AutoAuraToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Buy Mastery",
   CurrentValue = false,
   Flag = "AutoMasteryToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Anti AFK",
   CurrentValue = false,
   Flag = "AntiAFKToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Tab = Window:CreateTab("Items", nil) -- Title, Image

local Section = Tab:CreateSection("Items")

local Toggle = Tab:CreateToggle({
   Name = "Auto Use Mystery Box",
   CurrentValue = false,
   Flag = "AutoBoxToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Use Golden Orb",
   CurrentValue = false,
   Flag = "AutoOrbToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Section = Tab:CreateSection("These Only Works when Rift is Active")

local Toggle = Tab:CreateToggle({
   Name = "Auto Use Golden Keys",
   CurrentValue = false,
   Flag = "AutoGoldenToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Use Royal Keys",
   CurrentValue = false,
   Flag = "AutoRoyalToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Tab = Window:CreateTab("Shops", nil)

local Section = Tab:CreateSection("Auto Buys when Restocked")

local Toggle = Tab:CreateToggle({
   Name = "Auto Buy Alien Shop",
   CurrentValue = false,
   Flag = "AutoAlienToggle",
   Callback = function(Value)
      _G.Alien = Value
      if Value then
         task.spawn(function()
            local event = game:GetService("ReplicatedStorage"):WaitForChild("Shared"):WaitForChild("Framework"):WaitForChild("Network"):WaitForChild("Remote"):WaitForChild("Event")
            while _G.Alien do
               for i = 1, 3 do
                  local args = {
                     [1] = "BuyShopItem",
                     [2] = "alien-shop",
                     [3] = i
                  }
                  event:FireServer(unpack(args))
                  task.wait(0.1)
               end
            end
         end)
      end
   end
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Buy Blackmarket",
   CurrentValue = false,
   Flag = "AutoBlackmarketToggle", -- Make sure every element has a different flag
   Callback = function(Value)
      _G.Blackmarket = Value
      if Value then
         task.spawn(function()
            local event = game:GetService("ReplicatedStorage")
               :WaitForChild("Shared")
               :WaitForChild("Framework")
               :WaitForChild("Network")
               :WaitForChild("Remote")
               :WaitForChild("Event")
            while _G.Blackmarket do
               for i = 1, 3 do
                  local args = {
                     [1] = "BuyShopItem",
                     [2] = "shard-shop",
                     [3] = i
                  }
                  event:FireServer(unpack(args))
                  task.wait(0.1)
               end
            end
         end)
      end
   end
})

local Tab = Window:CreateTab("Event", nil) -- Title, Image

local Section = Tab:CreateSection("Easter")

local Button = Tab:CreateButton({
   Name = "Teleport to Easter",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local Section = Tab:CreateSection("Eggs")

local Tab = Window:CreateTab("Enchant", nil) -- Title, Image

local Section = Tab:CreateSection("This only works in the Enchanting Area")
local Dropdown = Tab:CreateDropdown({
   Name = "Select Enchant:",
   Options = {"None","💰 Looter", "💭 Bubbler", "⚡️ Team Up", "✨ Gleaming", "🧲 Magnetism", "∞ Infinity", "🎲 High Roller"},
   CurrentOption = {"None"},
   MultipleOptions = true,
   Flag = "ChoseEnchantDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Select Enchant Level:",
   Options = {"None","I", "II", "III", "IV", "V"},
   CurrentOption = {"None"},
   MultipleOptions = true,
   Flag = "EnchantLevelDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Enchant",
   CurrentValue = false,
   Flag = "AutoEnchantToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Tab = Window:CreateTab("Visual", nil) -- Title, Image

local Section = Tab:CreateSection("Visual")

local Toggle = Tab:CreateToggle({
   Name = "Rift ESP",
   CurrentValue = false,
   Flag = "RiftESPToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Rift Luck ESP",
   CurrentValue = false,
   Flag = "RiftLuckToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Rift distance ESP",
   CurrentValue = false,
   Flag = "RiftDistanceToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Rift Timer ESP",
   CurrentValue = false,
   Flag = "RiftTimerToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Tab = Window:CreateTab("Rifts", nil) -- Title, Image

local Section = Tab:CreateSection("This will Autofarm the Selected Rift")

local Dropdown = Tab:CreateDropdown({
   Name = "Select Rift",
   Options = {"None", "Aura Egg","Royal Chest", "Rainbow Egg","Void Egg", "Nightmare Egg", "Bunny Egg", "Pastel Egg"},
   CurrentOption = {"None"},
   MultipleOptions = true,
   Flag = "RiftAFDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Select Rift Luck",
   Options = {"None","5x", "x10", "x25"},
   CurrentOption = {"None"},
   MultipleOptions = true,
   Flag = "LuckAFDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Enable Rift Autofarm",
   CurrentValue = false,
   Flag = "RiftAFToggle", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

local Tab = Window:CreateTab("Potions", nil) -- Title, Image

local Section = Tab:CreateSection("Potions")

local Dropdown = Tab:CreateDropdown({
   Name = "Select Potion",
   Options = {"None","Coins", "Lucky", "Speed", "Mythic"},
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "SelectPotionDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Select Potion Level",
   Options = {"None","I", "II", "III", "IV", "V"},
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "PotionLevelDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local Button = Tab:CreateButton({
   Name = "Use Selected Potion",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local Button = Tab:CreateButton({
   Name = "Use Infinity Elixir",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local Tab = Window:CreateTab("Teleport", nil)

local Section = Tab:CreateSection("Islands")

local Button = Tab:CreateButton({
   Name = "Unlock All Islands",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local Dropdown = Tab:CreateDropdown({
   Name = "Teleport to Island",
   Options = {"None","Easter", "The Overworld", "Floating Island", "Outer Space", "Twilight", "The Void", "Zen"},
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "IslandTeleportDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local Button = Tab:CreateButton({
   Name = "Teleport to Selected Island",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local Section = Tab:CreateSection("Players")

local Dropdown = Tab:CreateDropdown({
   Name = "Teleport to Player",
   Options = {"None","", "", "", "", "", "", "", "", "", "", "", ""},
   CurrentOption = {"None"},
   MultipleOptions = false,
   Flag = "PlayerTeleportDropdown", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)
   -- The function that takes place when the selected option is changed
   -- The variable (Options) is a table of strings for the current selected options
   end,
})

local Button = Tab:CreateButton({
   Name = "Teleport to Selected Player",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local Tab = Window:CreateTab("Misc", nil) -- Title, Image

local Section = Tab:CreateSection("Others")

local Button = Tab:CreateButton({
   Name = "Server Hop",
   Callback = function()
   -- The function that takes place when the button is pressed
   end,
})

local Tab = Window:CreateTab("OP", nil) -- Title, Image

local Section = Tab:CreateSection("You need to give me a gamepass for it to work")

local Toggle = Tab:CreateToggle({
   Name = "Auto Open 40 Eggs",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})


local Toggle = Tab:CreateToggle({
   Name = "Fake Use Infinity Elixir / Potions",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})
