local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local MainWindow = Rayfield:CreateWindow({
    Name = "Bubble Gum Simulator Infinity",
    Icon = 0,
    LoadingTitle = "Loading Interface...",
    LoadingSubtitle = "",
    Theme = "Default",

    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false,

    ConfigurationSaving = {
        Enabled = true,
        FolderName = nil,
        FileName = "BGSI Script"
    },

    Discord = {
        Enabled = false,
        Invite = "noinvitelink",
        RememberJoins = true
    },

    KeySystem = false,
    KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key",
        SaveKey = true,
        GrabKeyFromSite = false,
        Key = {"Hello"}
    }
})

local MainTab = MainWindow:CreateTab("Main", 4483362458)

local Toggle = Tab:CreateToggle({
   Name = "Auto Blow Bubbles",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})


local Toggle = Tab:CreateToggle({
   Name = "Auto Sell (Must be near sell area)",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
   -- The function that takes place when the toggle is pressed
   -- The variable (Value) is a boolean on whether the toggle is true or false
   end,
})

-- Auto Claim Playtime
local autoClaimRunning = false
local claimThread = nil

MainTab:CreateToggle({
    Name = "Auto Claim Playtime",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        autoClaimRunning = Value
        if autoClaimRunning then
            if claimThread == nil then
                claimThread = task.spawn(function()
                    while autoClaimRunning do
                        game:GetService("ReplicatedStorage")
                            :WaitForChild("Shared")
                            :WaitForChild("Framework")
                            :WaitForChild("Network")
                            :WaitForChild("Remote")
                            :WaitForChild("Function")
                            :InvokeServer("ClaimPlaytime", 1, 2, 3, 4, 5, 6, 7, 8, 9)
                        print("Claiming playtime at:", os.clock())
                        task.wait(5)
                    end
                    claimThread = nil
                end)
            end
        else
            autoClaimRunning = false
        end
    end,
})
